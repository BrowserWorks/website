---
import type { Props } from '@astrojs/starlight/props'
import { useTranslations } from 'node_modules/@astrojs/starlight/utils/translations'
import Header from './Header.astro'

import MobileMenuToggle from '@astrojs/starlight/components/MobileMenuToggle.astro'
import DownloadsPage from './DownloadsPage.astro'
import Footer from './Footer.astro'
import Home from './Home.astro'
import Sidebar from './Sidebar.astro'

// Check if we are on the hompage
const isHomepage = Astro.props.slug === ''
const isDownloads = Astro.props.slug === 'download'

const { hasSidebar, locale } = Astro.props
const t = useTranslations(locale)
// If we are, render a custom component
// If not, render the default page frame
---

{
	isHomepage ? (
		<Home {...Astro.props} />
	) : isDownloads ? (
		<DownloadsPage {...Astro.props} />
	) : (
		<>
			<div class="page sl-flex">
				<header class="header grid h-16 w-full grid-cols-[auto] px-1 py-1 lg:grid-cols-[auto] lg:px-1.5 lg:py-1">
					<Header slot="header" {...Astro.props} />
				</header>
				{hasSidebar && (
					<nav class="sidebar" aria-label={t('sidebarNav.accessibleLabel')}>
						<MobileMenuToggle {...Astro.props} />
						<div id="starlight__sidebar" class="sidebar-pane">
							<div class="sidebar-content sl-flex">
								<Sidebar slot="sidebar" {...Astro.props} />
							</div>
						</div>
					</nav>
				)}
				<div class="main-frame">
					<slot />
				</div>
			</div>
			<Footer class="relative z-10" />
		</>
	)
}

<style>
	.page {
		flex-direction: column;
		min-height: 100vh;
	}

	.header {
		z-index: var(--sl-z-index-navbar);
		position: fixed;
		background: var(--sl-color-bg);
		inset-inline-start: 0;
		inset-block-start: 0;
		width: 100%;
		height: var(--sl-nav-height);
		padding: var(--sl-nav-pad-y) var(--sl-nav-pad-x);
		padding-inline-end: var(--sl-nav-pad-x);
	}

	.right-sidebar {
		border-inline-start: unset;
	}

	.sidebar-pane {
		visibility: var(--sl-sidebar-visibility, hidden);
		position: fixed;
		z-index: var(--sl-z-index-menu);
		inset-block: 0;
		inset-inline-start: 0;
		padding-top: var(--sl-nav-height);
		width: 100%;
		background-color: var(--sl-color-black);
		overflow-y: auto;
	}

	:global([aria-expanded='true']) ~ .sidebar-pane {
		--sl-sidebar-visibility: visible;
	}

	.sidebar-content {
		height: 100%;
		min-height: max-content;
		padding: 1rem var(--sl-sidebar-pad-x) 0;
		flex-direction: column;
		gap: 1rem;
	}

	@media (min-width: 50rem) {
		.sidebar-content::after {
			content: '';
			padding-bottom: 1px;
		}
	}

	.main-frame {
		padding-top: calc(var(--sl-nav-height) + var(--sl-mobile-toc-height));
		padding-inline-start: var(--sl-content-inline-start);
	}

	@media (min-width: 50rem) {
		.sidebar-pane {
			--sl-sidebar-visibility: visible;
			width: var(--sl-sidebar-width);
		}
	}
</style>
